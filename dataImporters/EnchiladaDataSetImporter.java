package dataImporters;

import gui.EnchiladaDataTableModel;

import java.io.File;
import java.io.IOException;
import java.sql.Connection;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.TreeMap;

import javax.xml.parsers.ParserConfigurationException;
import javax.xml.parsers.SAXParser;
import javax.xml.parsers.SAXParserFactory;

import org.xml.sax.Attributes;
import org.xml.sax.SAXException;
import org.xml.sax.SAXParseException;
import org.xml.sax.helpers.DefaultHandler;

import database.SQLServerDatabase;

/**
 * 
 * @author steinbel
 *
 * Handles importation of .ed files.
 */

public class EnchiladaDataSetImporter extends DefaultHandler {
	
	private SQLServerDatabase db;
	private Connection con;
	private Statement stmt;
	private String datatype;
	private boolean inDataSetInfo = false;
	private boolean inAtomInfoDense = false;
	private boolean inAtomInfoSparse = false;
	private String dataSetName;
	private String sparseName;
	private int atomID;
	private String DSIparams;
	private String AIDparams;
	private int collectionID;
	private int datasetID;
	private TreeMap<String, ArrayList<String>> AISinfo;
	private static final String quote = "'";
	
	
	public EnchiladaDataSetImporter(SQLServerDatabase sqlsdb){
		
		db = sqlsdb;
		con = db.getCon();
		try {
			stmt = con.createStatement();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			System.err.println("SQL problems creating statement.");
			e.printStackTrace();
		}
		
	}
	
	/**
	 * Collect the filenames from the gui table, check each one to make sure it
	 * has the correct extension (.ed).
	 * 
	 * @param table	The EnchiladaDataTableModel to get names from.
	 * @return ArrayList<String>	The filenames contained in the table.
	 */
	public ArrayList<String> collectTableInfo(EnchiladaDataTableModel table) {
		
		ArrayList<String> tableInfo = new ArrayList<String>();
		int rowCount = table.getRowCount()-1;
		String name = "";
		String ext = "";
		
		for (int i=0;i<rowCount;i++) {
			
			name = (String)table.getValueAt(i, 1);
			ext = name.substring(name.length()-3, name.length());
			
			if (ext.equals(".ed"))
				tableInfo.add((String)table.getValueAt(i,1));
			else
				System.err.println("Incorrect file extension for file " + name);
		}
		return tableInfo;
	}
	
	/**
	 * Takes in a list of filenames and imports each file in turn.
	 * 
	 * @param fileNames
	 */
	public void importFiles(ArrayList<String> fileNames){
		
		//make the DTD
		File file = new File(fileNames.get(0));
		String path = file.getAbsolutePath();
		int length = file.getName().length();
		path = path.substring(0, path.length()-length );
		FileMaker maker = new FileMaker(path, "enchilada");
		if (maker.fileCreated())
			maker.setEnchiladaContents();
		
		for (String eachFile : fileNames)
			read(eachFile);
		
		maker.deleteTemps();
		
	}
	
	/**
	 * Given a .ed filename, sets up to parse that xml file and stores the 
	 * information in the relevant tables in the database..  
	 * Helper function for importFiles().
	 * 
	 * @param fileName - the xml (.ed) file to read
	 */
	private void read(String fileName){
	
		SAXParserFactory factory = SAXParserFactory.newInstance();
		//validate the XML to make sure it's all nice and legal
		factory.setValidating(true);
		
		EnchiladaDataSetImporter handler = this;
		
		try {
			SAXParser parser = factory.newSAXParser();
			parser.parse(fileName, handler);
			
		} catch (ParserConfigurationException e) {
			// TODO make GUI
			System.err.println("Parser Configuration error.");
			e.printStackTrace();
		}
		/*
		 * below code is from the Java tutorial on XML:
		 * @see http://java.sun.com/xml/jaxp/dist/1.1/docs/tutorial/sax/6_val.html
		 */
		catch (SAXParseException spe){
			//error generated by the parser
			System.out.println("\n** Parsing error, line " +
					spe.getLineNumber() + ", uri " +
					spe.getSystemId());
			System.out.println("    " + spe.getMessage());
			
			//Unpack the delivered exception to get the exception it contains
			Exception x = spe;
			if (spe.getException() != null)
				x = spe.getException();
			x.printStackTrace();
		}
		catch (SAXException e) {
			// TODO make GUI
			System.err.println("SAX exception.  Incorrect file format.");
			e.printStackTrace();
		} catch (IOException e) {
			// TODO make GUI
			System.err.println("IO Exception.");
			e.printStackTrace();
		}
	
	}


	/**
	 * Called each time a starting element in encountered, this method sets
	 * boolean tags for which tables the information belongs to and what they are
	 * named.
	 */
	 public void startElement(String namespaceURI,
            	String lName, // local name
             String qName, // qualified name
             Attributes attrs)
	 throws SAXException {

			String eName = lName; // element name
			if ("".equals(eName)) 
				eName = qName; // namespaceAware = false
			
			//System.out.println(eName);//debugging
			
			//handle different tags
			if (eName.equals("enchiladadata"))
				datatype = attrs.getValue(0);
			else if (eName.equals("datasetinfo")){
				inDataSetInfo = true;
				dataSetName = attrs.getValue(0);
				DSIparams="";
			}
			else if (eName.equals("atominfodense")){
				inAtomInfoDense = true;
				atomID = db.getNextID();
				AIDparams="";
				
				//set up to receive sparse info
				AISinfo = new TreeMap<String, ArrayList<String>>();
				
				//if this is the first particle, create a new dataset & collection
				if (!DSIparams.equals("")){
					String comment = ""; //what do we really want here?
					int[] collectionInfo = db.createEmptyCollectionAndDataset(
												datatype,
												0,
												dataSetName,
												comment,
												DSIparams);
					collectionID = collectionInfo[0];
					datasetID = collectionInfo[1];
					DSIparams = ""; //reset this
				}
			}
			else if (eName.equals("atominfosparse")){
				inAtomInfoSparse = true;
				sparseName = "AtomInfoSparse" + attrs.getValue(0);
				
				//check if this flavor of AIS has an entry in AISinfo yet,
				//create one if necessary
				if (!AISinfo.containsKey(sparseName))
					AISinfo.put(sparseName, new ArrayList<String>());
				
				//initialize AISparams string
				AISinfo.get(sparseName).add("");
			}
		 
	 }
	
	 /**
	  * This method resets flags and names when exiting different elements.
	  */
	 public void endElement(String namespaceURI,
             String sName, // simple name
             String qName  // qualified name
             )throws SAXException{
		 
		 //at the end of the document, push all the information to the database
		 if (qName.equals("enchiladadata")){
			 try {
					stmt.executeBatch();
				} catch (SQLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
		 }
		 else if (qName.equals("datasetinfo")){
			 inDataSetInfo = false;
			 dataSetName = null;
		 }
		 else if (qName.equals("atominfodense")){
			 inAtomInfoDense = false;
			 db.insertParticle(AIDparams, AISinfo, db.getCollection(collectionID), 
					 collectionID, atomID);
		 }
		 else if (qName.equals("atominfosparse")){
			 inAtomInfoSparse = false;
			 sparseName = null;
		 }
	 }
	 
	 /**
	  * Handles the incoming data by inserting it into the correct tables in the
	  * database according to the boolean flags set by the element tags.
	  */
	 public void characters(char[] buf, int offset, int len)
	 	throws SAXException{
		 
		 String data = new String(buf, offset, len);
		 //System.out.println(data);//debugging
		 
		 /*
		  * @non-Javadoc
		  * Because the parser checks to make sure the elements are in order,
		  * we can check in reverse-heirarchical order to reduce if statements.
		  */

		 //if it's a sparse info field, add it to the last sparse entry for this
		 //sparse table
		 if (inAtomInfoSparse){
			 ArrayList<String> list = AISinfo.get(sparseName);
			 String AISparams = list.get(list.size()-1);
			 AISparams = intersperse(data, AISparams);
			 //replace old with new
			 list.remove(list.size()-1);
			 list.add(AISparams);
			 //System.out.println("AISparams: " + AISparams);//debugging
		 }
		 else if (inAtomInfoDense){
			 AIDparams = intersperse(data, AIDparams);
			 //System.out.println("AIDparams: " + AIDparams);//debugging
		 }
		 else if (inDataSetInfo){
			 DSIparams = intersperse(data, DSIparams);
			 //System.out.println("DSIparams: " + DSIparams);//debugging
		 }
	 }
	 
	 /**
	  * Creates a comma-separated string (with all string surrounded by 
	  * single quotes) from an existing string and an addition.
	  * 
	  * @param add		The string to add onto the end of params.
	  * @param params	The existing string.
	  * @return	The comma-separated string.
	  */
	 private String intersperse(String add, String params){
		 
		 //separate out the numbers from the real men!
		 try{
			 Float number = new Float(add);
				
			 if (params.equals(""))
			 	params = add;
			 else
			 	params = params + "," + add;
			 
		 }
		 //if not a number, surround in single quotes
		 catch (NumberFormatException e){
				
			 if (params.equals(""))
			 	params = quote + add + quote;
			 else
			 	params = params + "," + quote + add + quote;
			 
		 }

		 return params;

	 }
}
